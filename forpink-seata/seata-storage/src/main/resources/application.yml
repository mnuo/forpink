server:
  port: 8081
  host: localhost
  servlet:
      context-path: /storage
swagger:
  open: true
## 数据源配置
spring:
   datasource:
      url: jdbc:mysql://localhost:3306/pink?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&zeroDateTimeBehavior=CONVERT_TO_NULL
      username: root
      password: root123
      # schema: classpath:springbootsecurityauth.sql
      sql-script-encoding: utf-8
      initialization-mode: always
      driver-class-name: com.mysql.jdbc.Driver
      # 初始化大小，最小，最大
      initialSize: 1
      minIdle: 3
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 30000
      validationQuery: select 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# JPA配置
   jpa:
      database-platform: org.hibernate.dialect.MySQL5Dialect # mysql5.5版本使用 版本以上使用:org.hibernate.dialect.MySQLDialect
      show-sql: true   # 运行时输出jpa执行的sql语句
      hibernate:
         ddl-auto: update
   jackson:
       time-zone: GMT+8
   redis:
      open: true # 是否开启redis缓存  true开启   false关闭
      database: 1
      host: 127.0.0.1
      port: 6379
      timeout: 5000s  # 连接超时时长（毫秒）
      jedis:
         pool:
            max-active: 8 #连接池最大连接数（使用负值表示没有限制）
            max-idle: 8  #连接池中的最大空闲连接
            max-wait: -1s #连接池最大阻塞等待时间（使用负值表示没有限制)
            min-idle: 0  #连接池中的最小空闲连接
## 日志配置
logging:
  config: src/main/resources/logback.xml
#seata配置
seata:
  enabled: true
  application-id: storage-service
  #这里的名字与file.conf中vgroup_mapping.my_test_tx_group = "default"相同
  tx-service-group: forpink_tx_group
  enable-auto-data-source-proxy: true
#  use-jdk-proxy: false
  service:
  #这里的名字与file.conf中vgroup_mapping.my_test_tx_group = "default"相同
    vgroup-mapping:
      forpink_tx_group: default
      #这里的名字与file.conf中default.grouplist = "127.0.0.1:8091"相同
    grouplist:
      default: 127.0.0.1:8091
#      disable-global-transaction: false
  config:
    type: nacos
    nacos:
      namespace:
      #这里的地址就是你的nacos的地址,可以更换为线上
      serverAddr: 127.0.0.1:8848
      #这里的名字就是registry.conf中 nacos的group名字
      group: SEATA_GROUP
      userName: "nacos"
      password: "nacos"
  registry:
    type: nacos
    nacos:
      application: seata-server
      #这里的地址就是你的nacos的地址,可以更换为线上
      server-addr: 127.0.0.1:8848
      #这里的名字就是registry.conf中 nacos的group名字
      group: SEATA_GROUP
      namespace:
      userName: "nacos"
      password: "nacos"
        
service:
   client:
      clientSecret: 123456
      clientId: client_1
      grantType:
         - password
         - refresh_token
   ignore:
      resources: 
         - /app/user
         - /oauth/*
         - /auth/user/login
         
  